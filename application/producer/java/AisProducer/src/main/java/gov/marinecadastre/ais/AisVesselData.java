/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.marinecadastre.ais;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Ais Vessel Data */
@org.apache.avro.specific.AvroGenerated
public class AisVesselData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5739072513059003783L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AisVesselData\",\"namespace\":\"gov.marinecadastre.ais\",\"doc\":\"Ais Vessel Data\",\"fields\":[{\"name\":\"mmsi\",\"type\":[\"null\",\"int\"],\"doc\":\"Maritime Mobile Service Identity (MMSI)\",\"default\":null},{\"name\":\"baseDateTime\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"time-millis\"}],\"doc\":\"Observation date\",\"default\":null},{\"name\":\"lat\",\"type\":[\"null\",\"double\"],\"doc\":\"Latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"null\",\"double\"],\"doc\":\"Longitude\",\"default\":null},{\"name\":\"SOG\",\"type\":[\"null\",\"double\"],\"doc\":\"Speed over ground (SOG)\",\"default\":null},{\"name\":\"COG\",\"type\":[\"null\",\"double\"],\"doc\":\"course over ground (COG)\",\"default\":null},{\"name\":\"heading\",\"type\":[\"null\",\"double\"],\"doc\":\"Heading\",\"default\":null},{\"name\":\"vesselName\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the vessel\",\"default\":null},{\"name\":\"IMO\",\"type\":[\"null\",\"string\"],\"doc\":\"IMO vessel number\",\"default\":null},{\"name\":\"callSign\",\"type\":[\"null\",\"string\"],\"doc\":\"Callsign\",\"default\":null},{\"name\":\"vesselType\",\"type\":[\"null\",\"int\"],\"doc\":\"Type of vessel\",\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"int\"],\"doc\":\"Status\",\"default\":null},{\"name\":\"length\",\"type\":[\"null\",\"int\"],\"doc\":\"Length\",\"default\":null},{\"name\":\"width\",\"type\":[\"null\",\"int\"],\"doc\":\"Width\",\"default\":null},{\"name\":\"draft\",\"type\":[\"null\",\"double\"],\"doc\":\"Draft\",\"default\":null},{\"name\":\"cargo\",\"type\":[\"null\",\"int\"],\"doc\":\"Cargo\",\"default\":null},{\"name\":\"transceiverClass\",\"type\":[\"null\",\"string\"],\"doc\":\"Transceiver Class\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMillisConversion());
  }

  private static final BinaryMessageEncoder<AisVesselData> ENCODER =
      new BinaryMessageEncoder<AisVesselData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AisVesselData> DECODER =
      new BinaryMessageDecoder<AisVesselData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AisVesselData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AisVesselData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AisVesselData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AisVesselData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AisVesselData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AisVesselData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AisVesselData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AisVesselData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Maritime Mobile Service Identity (MMSI) */
   private java.lang.Integer mmsi;
  /** Observation date */
   private java.time.LocalTime baseDateTime;
  /** Latitude */
   private java.lang.Double lat;
  /** Longitude */
   private java.lang.Double lon;
  /** Speed over ground (SOG) */
   private java.lang.Double SOG;
  /** course over ground (COG) */
   private java.lang.Double COG;
  /** Heading */
   private java.lang.Double heading;
  /** Name of the vessel */
   private java.lang.CharSequence vesselName;
  /** IMO vessel number */
   private java.lang.CharSequence IMO;
  /** Callsign */
   private java.lang.CharSequence callSign;
  /** Type of vessel */
   private java.lang.Integer vesselType;
  /** Status */
   private java.lang.Integer status;
  /** Length */
   private java.lang.Integer length;
  /** Width */
   private java.lang.Integer width;
  /** Draft */
   private java.lang.Double draft;
  /** Cargo */
   private java.lang.Integer cargo;
  /** Transceiver Class */
   private java.lang.CharSequence transceiverClass;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AisVesselData() {}

  /**
   * All-args constructor.
   * @param mmsi Maritime Mobile Service Identity (MMSI)
   * @param baseDateTime Observation date
   * @param lat Latitude
   * @param lon Longitude
   * @param SOG Speed over ground (SOG)
   * @param COG course over ground (COG)
   * @param heading Heading
   * @param vesselName Name of the vessel
   * @param IMO IMO vessel number
   * @param callSign Callsign
   * @param vesselType Type of vessel
   * @param status Status
   * @param length Length
   * @param width Width
   * @param draft Draft
   * @param cargo Cargo
   * @param transceiverClass Transceiver Class
   */
  public AisVesselData(java.lang.Integer mmsi, java.time.LocalTime baseDateTime, java.lang.Double lat, java.lang.Double lon, java.lang.Double SOG, java.lang.Double COG, java.lang.Double heading, java.lang.CharSequence vesselName, java.lang.CharSequence IMO, java.lang.CharSequence callSign, java.lang.Integer vesselType, java.lang.Integer status, java.lang.Integer length, java.lang.Integer width, java.lang.Double draft, java.lang.Integer cargo, java.lang.CharSequence transceiverClass) {
    this.mmsi = mmsi;
    this.baseDateTime = baseDateTime;
    this.lat = lat;
    this.lon = lon;
    this.SOG = SOG;
    this.COG = COG;
    this.heading = heading;
    this.vesselName = vesselName;
    this.IMO = IMO;
    this.callSign = callSign;
    this.vesselType = vesselType;
    this.status = status;
    this.length = length;
    this.width = width;
    this.draft = draft;
    this.cargo = cargo;
    this.transceiverClass = transceiverClass;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mmsi;
    case 1: return baseDateTime;
    case 2: return lat;
    case 3: return lon;
    case 4: return SOG;
    case 5: return COG;
    case 6: return heading;
    case 7: return vesselName;
    case 8: return IMO;
    case 9: return callSign;
    case 10: return vesselType;
    case 11: return status;
    case 12: return length;
    case 13: return width;
    case 14: return draft;
    case 15: return cargo;
    case 16: return transceiverClass;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mmsi = (java.lang.Integer)value$; break;
    case 1: baseDateTime = (java.time.LocalTime)value$; break;
    case 2: lat = (java.lang.Double)value$; break;
    case 3: lon = (java.lang.Double)value$; break;
    case 4: SOG = (java.lang.Double)value$; break;
    case 5: COG = (java.lang.Double)value$; break;
    case 6: heading = (java.lang.Double)value$; break;
    case 7: vesselName = (java.lang.CharSequence)value$; break;
    case 8: IMO = (java.lang.CharSequence)value$; break;
    case 9: callSign = (java.lang.CharSequence)value$; break;
    case 10: vesselType = (java.lang.Integer)value$; break;
    case 11: status = (java.lang.Integer)value$; break;
    case 12: length = (java.lang.Integer)value$; break;
    case 13: width = (java.lang.Integer)value$; break;
    case 14: draft = (java.lang.Double)value$; break;
    case 15: cargo = (java.lang.Integer)value$; break;
    case 16: transceiverClass = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mmsi' field.
   * @return Maritime Mobile Service Identity (MMSI)
   */
  public java.lang.Integer getMmsi() {
    return mmsi;
  }


  /**
   * Sets the value of the 'mmsi' field.
   * Maritime Mobile Service Identity (MMSI)
   * @param value the value to set.
   */
  public void setMmsi(java.lang.Integer value) {
    this.mmsi = value;
  }

  /**
   * Gets the value of the 'baseDateTime' field.
   * @return Observation date
   */
  public java.time.LocalTime getBaseDateTime() {
    return baseDateTime;
  }


  /**
   * Sets the value of the 'baseDateTime' field.
   * Observation date
   * @param value the value to set.
   */
  public void setBaseDateTime(java.time.LocalTime value) {
    this.baseDateTime = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * @return Latitude
   */
  public java.lang.Double getLat() {
    return lat;
  }


  /**
   * Sets the value of the 'lat' field.
   * Latitude
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   * @return Longitude
   */
  public java.lang.Double getLon() {
    return lon;
  }


  /**
   * Sets the value of the 'lon' field.
   * Longitude
   * @param value the value to set.
   */
  public void setLon(java.lang.Double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'SOG' field.
   * @return Speed over ground (SOG)
   */
  public java.lang.Double getSOG() {
    return SOG;
  }


  /**
   * Sets the value of the 'SOG' field.
   * Speed over ground (SOG)
   * @param value the value to set.
   */
  public void setSOG(java.lang.Double value) {
    this.SOG = value;
  }

  /**
   * Gets the value of the 'COG' field.
   * @return course over ground (COG)
   */
  public java.lang.Double getCOG() {
    return COG;
  }


  /**
   * Sets the value of the 'COG' field.
   * course over ground (COG)
   * @param value the value to set.
   */
  public void setCOG(java.lang.Double value) {
    this.COG = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return Heading
   */
  public java.lang.Double getHeading() {
    return heading;
  }


  /**
   * Sets the value of the 'heading' field.
   * Heading
   * @param value the value to set.
   */
  public void setHeading(java.lang.Double value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'vesselName' field.
   * @return Name of the vessel
   */
  public java.lang.CharSequence getVesselName() {
    return vesselName;
  }


  /**
   * Sets the value of the 'vesselName' field.
   * Name of the vessel
   * @param value the value to set.
   */
  public void setVesselName(java.lang.CharSequence value) {
    this.vesselName = value;
  }

  /**
   * Gets the value of the 'IMO' field.
   * @return IMO vessel number
   */
  public java.lang.CharSequence getIMO() {
    return IMO;
  }


  /**
   * Sets the value of the 'IMO' field.
   * IMO vessel number
   * @param value the value to set.
   */
  public void setIMO(java.lang.CharSequence value) {
    this.IMO = value;
  }

  /**
   * Gets the value of the 'callSign' field.
   * @return Callsign
   */
  public java.lang.CharSequence getCallSign() {
    return callSign;
  }


  /**
   * Sets the value of the 'callSign' field.
   * Callsign
   * @param value the value to set.
   */
  public void setCallSign(java.lang.CharSequence value) {
    this.callSign = value;
  }

  /**
   * Gets the value of the 'vesselType' field.
   * @return Type of vessel
   */
  public java.lang.Integer getVesselType() {
    return vesselType;
  }


  /**
   * Sets the value of the 'vesselType' field.
   * Type of vessel
   * @param value the value to set.
   */
  public void setVesselType(java.lang.Integer value) {
    this.vesselType = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Status
   */
  public java.lang.Integer getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Status
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'length' field.
   * @return Length
   */
  public java.lang.Integer getLength() {
    return length;
  }


  /**
   * Sets the value of the 'length' field.
   * Length
   * @param value the value to set.
   */
  public void setLength(java.lang.Integer value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'width' field.
   * @return Width
   */
  public java.lang.Integer getWidth() {
    return width;
  }


  /**
   * Sets the value of the 'width' field.
   * Width
   * @param value the value to set.
   */
  public void setWidth(java.lang.Integer value) {
    this.width = value;
  }

  /**
   * Gets the value of the 'draft' field.
   * @return Draft
   */
  public java.lang.Double getDraft() {
    return draft;
  }


  /**
   * Sets the value of the 'draft' field.
   * Draft
   * @param value the value to set.
   */
  public void setDraft(java.lang.Double value) {
    this.draft = value;
  }

  /**
   * Gets the value of the 'cargo' field.
   * @return Cargo
   */
  public java.lang.Integer getCargo() {
    return cargo;
  }


  /**
   * Sets the value of the 'cargo' field.
   * Cargo
   * @param value the value to set.
   */
  public void setCargo(java.lang.Integer value) {
    this.cargo = value;
  }

  /**
   * Gets the value of the 'transceiverClass' field.
   * @return Transceiver Class
   */
  public java.lang.CharSequence getTransceiverClass() {
    return transceiverClass;
  }


  /**
   * Sets the value of the 'transceiverClass' field.
   * Transceiver Class
   * @param value the value to set.
   */
  public void setTransceiverClass(java.lang.CharSequence value) {
    this.transceiverClass = value;
  }

  /**
   * Creates a new AisVesselData RecordBuilder.
   * @return A new AisVesselData RecordBuilder
   */
  public static gov.marinecadastre.ais.AisVesselData.Builder newBuilder() {
    return new gov.marinecadastre.ais.AisVesselData.Builder();
  }

  /**
   * Creates a new AisVesselData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AisVesselData RecordBuilder
   */
  public static gov.marinecadastre.ais.AisVesselData.Builder newBuilder(gov.marinecadastre.ais.AisVesselData.Builder other) {
    if (other == null) {
      return new gov.marinecadastre.ais.AisVesselData.Builder();
    } else {
      return new gov.marinecadastre.ais.AisVesselData.Builder(other);
    }
  }

  /**
   * Creates a new AisVesselData RecordBuilder by copying an existing AisVesselData instance.
   * @param other The existing instance to copy.
   * @return A new AisVesselData RecordBuilder
   */
  public static gov.marinecadastre.ais.AisVesselData.Builder newBuilder(gov.marinecadastre.ais.AisVesselData other) {
    if (other == null) {
      return new gov.marinecadastre.ais.AisVesselData.Builder();
    } else {
      return new gov.marinecadastre.ais.AisVesselData.Builder(other);
    }
  }

  /**
   * RecordBuilder for AisVesselData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AisVesselData>
    implements org.apache.avro.data.RecordBuilder<AisVesselData> {

    /** Maritime Mobile Service Identity (MMSI) */
    private java.lang.Integer mmsi;
    /** Observation date */
    private java.time.LocalTime baseDateTime;
    /** Latitude */
    private java.lang.Double lat;
    /** Longitude */
    private java.lang.Double lon;
    /** Speed over ground (SOG) */
    private java.lang.Double SOG;
    /** course over ground (COG) */
    private java.lang.Double COG;
    /** Heading */
    private java.lang.Double heading;
    /** Name of the vessel */
    private java.lang.CharSequence vesselName;
    /** IMO vessel number */
    private java.lang.CharSequence IMO;
    /** Callsign */
    private java.lang.CharSequence callSign;
    /** Type of vessel */
    private java.lang.Integer vesselType;
    /** Status */
    private java.lang.Integer status;
    /** Length */
    private java.lang.Integer length;
    /** Width */
    private java.lang.Integer width;
    /** Draft */
    private java.lang.Double draft;
    /** Cargo */
    private java.lang.Integer cargo;
    /** Transceiver Class */
    private java.lang.CharSequence transceiverClass;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.marinecadastre.ais.AisVesselData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mmsi)) {
        this.mmsi = data().deepCopy(fields()[0].schema(), other.mmsi);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.baseDateTime)) {
        this.baseDateTime = data().deepCopy(fields()[1].schema(), other.baseDateTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.SOG)) {
        this.SOG = data().deepCopy(fields()[4].schema(), other.SOG);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.COG)) {
        this.COG = data().deepCopy(fields()[5].schema(), other.COG);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.heading)) {
        this.heading = data().deepCopy(fields()[6].schema(), other.heading);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.vesselName)) {
        this.vesselName = data().deepCopy(fields()[7].schema(), other.vesselName);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.IMO)) {
        this.IMO = data().deepCopy(fields()[8].schema(), other.IMO);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.callSign)) {
        this.callSign = data().deepCopy(fields()[9].schema(), other.callSign);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.vesselType)) {
        this.vesselType = data().deepCopy(fields()[10].schema(), other.vesselType);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.status)) {
        this.status = data().deepCopy(fields()[11].schema(), other.status);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.length)) {
        this.length = data().deepCopy(fields()[12].schema(), other.length);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.width)) {
        this.width = data().deepCopy(fields()[13].schema(), other.width);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.draft)) {
        this.draft = data().deepCopy(fields()[14].schema(), other.draft);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.cargo)) {
        this.cargo = data().deepCopy(fields()[15].schema(), other.cargo);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.transceiverClass)) {
        this.transceiverClass = data().deepCopy(fields()[16].schema(), other.transceiverClass);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
    }

    /**
     * Creates a Builder by copying an existing AisVesselData instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.marinecadastre.ais.AisVesselData other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mmsi)) {
        this.mmsi = data().deepCopy(fields()[0].schema(), other.mmsi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.baseDateTime)) {
        this.baseDateTime = data().deepCopy(fields()[1].schema(), other.baseDateTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SOG)) {
        this.SOG = data().deepCopy(fields()[4].schema(), other.SOG);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.COG)) {
        this.COG = data().deepCopy(fields()[5].schema(), other.COG);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.heading)) {
        this.heading = data().deepCopy(fields()[6].schema(), other.heading);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.vesselName)) {
        this.vesselName = data().deepCopy(fields()[7].schema(), other.vesselName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.IMO)) {
        this.IMO = data().deepCopy(fields()[8].schema(), other.IMO);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.callSign)) {
        this.callSign = data().deepCopy(fields()[9].schema(), other.callSign);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.vesselType)) {
        this.vesselType = data().deepCopy(fields()[10].schema(), other.vesselType);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.status)) {
        this.status = data().deepCopy(fields()[11].schema(), other.status);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.length)) {
        this.length = data().deepCopy(fields()[12].schema(), other.length);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.width)) {
        this.width = data().deepCopy(fields()[13].schema(), other.width);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.draft)) {
        this.draft = data().deepCopy(fields()[14].schema(), other.draft);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.cargo)) {
        this.cargo = data().deepCopy(fields()[15].schema(), other.cargo);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.transceiverClass)) {
        this.transceiverClass = data().deepCopy(fields()[16].schema(), other.transceiverClass);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'mmsi' field.
      * Maritime Mobile Service Identity (MMSI)
      * @return The value.
      */
    public java.lang.Integer getMmsi() {
      return mmsi;
    }


    /**
      * Sets the value of the 'mmsi' field.
      * Maritime Mobile Service Identity (MMSI)
      * @param value The value of 'mmsi'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setMmsi(java.lang.Integer value) {
      validate(fields()[0], value);
      this.mmsi = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mmsi' field has been set.
      * Maritime Mobile Service Identity (MMSI)
      * @return True if the 'mmsi' field has been set, false otherwise.
      */
    public boolean hasMmsi() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mmsi' field.
      * Maritime Mobile Service Identity (MMSI)
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearMmsi() {
      mmsi = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseDateTime' field.
      * Observation date
      * @return The value.
      */
    public java.time.LocalTime getBaseDateTime() {
      return baseDateTime;
    }


    /**
      * Sets the value of the 'baseDateTime' field.
      * Observation date
      * @param value The value of 'baseDateTime'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setBaseDateTime(java.time.LocalTime value) {
      validate(fields()[1], value);
      this.baseDateTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'baseDateTime' field has been set.
      * Observation date
      * @return True if the 'baseDateTime' field has been set, false otherwise.
      */
    public boolean hasBaseDateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'baseDateTime' field.
      * Observation date
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearBaseDateTime() {
      baseDateTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lat' field.
      * Latitude
      * @return The value.
      */
    public java.lang.Double getLat() {
      return lat;
    }


    /**
      * Sets the value of the 'lat' field.
      * Latitude
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setLat(java.lang.Double value) {
      validate(fields()[2], value);
      this.lat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * Latitude
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lat' field.
      * Latitude
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearLat() {
      lat = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lon' field.
      * Longitude
      * @return The value.
      */
    public java.lang.Double getLon() {
      return lon;
    }


    /**
      * Sets the value of the 'lon' field.
      * Longitude
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setLon(java.lang.Double value) {
      validate(fields()[3], value);
      this.lon = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * Longitude
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lon' field.
      * Longitude
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearLon() {
      lon = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'SOG' field.
      * Speed over ground (SOG)
      * @return The value.
      */
    public java.lang.Double getSOG() {
      return SOG;
    }


    /**
      * Sets the value of the 'SOG' field.
      * Speed over ground (SOG)
      * @param value The value of 'SOG'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setSOG(java.lang.Double value) {
      validate(fields()[4], value);
      this.SOG = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'SOG' field has been set.
      * Speed over ground (SOG)
      * @return True if the 'SOG' field has been set, false otherwise.
      */
    public boolean hasSOG() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'SOG' field.
      * Speed over ground (SOG)
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearSOG() {
      SOG = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'COG' field.
      * course over ground (COG)
      * @return The value.
      */
    public java.lang.Double getCOG() {
      return COG;
    }


    /**
      * Sets the value of the 'COG' field.
      * course over ground (COG)
      * @param value The value of 'COG'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setCOG(java.lang.Double value) {
      validate(fields()[5], value);
      this.COG = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'COG' field has been set.
      * course over ground (COG)
      * @return True if the 'COG' field has been set, false otherwise.
      */
    public boolean hasCOG() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'COG' field.
      * course over ground (COG)
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearCOG() {
      COG = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * Heading
      * @return The value.
      */
    public java.lang.Double getHeading() {
      return heading;
    }


    /**
      * Sets the value of the 'heading' field.
      * Heading
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setHeading(java.lang.Double value) {
      validate(fields()[6], value);
      this.heading = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * Heading
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'heading' field.
      * Heading
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearHeading() {
      heading = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'vesselName' field.
      * Name of the vessel
      * @return The value.
      */
    public java.lang.CharSequence getVesselName() {
      return vesselName;
    }


    /**
      * Sets the value of the 'vesselName' field.
      * Name of the vessel
      * @param value The value of 'vesselName'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setVesselName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.vesselName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'vesselName' field has been set.
      * Name of the vessel
      * @return True if the 'vesselName' field has been set, false otherwise.
      */
    public boolean hasVesselName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'vesselName' field.
      * Name of the vessel
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearVesselName() {
      vesselName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'IMO' field.
      * IMO vessel number
      * @return The value.
      */
    public java.lang.CharSequence getIMO() {
      return IMO;
    }


    /**
      * Sets the value of the 'IMO' field.
      * IMO vessel number
      * @param value The value of 'IMO'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setIMO(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.IMO = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'IMO' field has been set.
      * IMO vessel number
      * @return True if the 'IMO' field has been set, false otherwise.
      */
    public boolean hasIMO() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'IMO' field.
      * IMO vessel number
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearIMO() {
      IMO = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'callSign' field.
      * Callsign
      * @return The value.
      */
    public java.lang.CharSequence getCallSign() {
      return callSign;
    }


    /**
      * Sets the value of the 'callSign' field.
      * Callsign
      * @param value The value of 'callSign'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setCallSign(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.callSign = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'callSign' field has been set.
      * Callsign
      * @return True if the 'callSign' field has been set, false otherwise.
      */
    public boolean hasCallSign() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'callSign' field.
      * Callsign
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearCallSign() {
      callSign = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'vesselType' field.
      * Type of vessel
      * @return The value.
      */
    public java.lang.Integer getVesselType() {
      return vesselType;
    }


    /**
      * Sets the value of the 'vesselType' field.
      * Type of vessel
      * @param value The value of 'vesselType'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setVesselType(java.lang.Integer value) {
      validate(fields()[10], value);
      this.vesselType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'vesselType' field has been set.
      * Type of vessel
      * @return True if the 'vesselType' field has been set, false otherwise.
      */
    public boolean hasVesselType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'vesselType' field.
      * Type of vessel
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearVesselType() {
      vesselType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status
      * @return The value.
      */
    public java.lang.Integer getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setStatus(java.lang.Integer value) {
      validate(fields()[11], value);
      this.status = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'status' field.
      * Status
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearStatus() {
      status = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'length' field.
      * Length
      * @return The value.
      */
    public java.lang.Integer getLength() {
      return length;
    }


    /**
      * Sets the value of the 'length' field.
      * Length
      * @param value The value of 'length'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setLength(java.lang.Integer value) {
      validate(fields()[12], value);
      this.length = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'length' field has been set.
      * Length
      * @return True if the 'length' field has been set, false otherwise.
      */
    public boolean hasLength() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'length' field.
      * Length
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearLength() {
      length = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'width' field.
      * Width
      * @return The value.
      */
    public java.lang.Integer getWidth() {
      return width;
    }


    /**
      * Sets the value of the 'width' field.
      * Width
      * @param value The value of 'width'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setWidth(java.lang.Integer value) {
      validate(fields()[13], value);
      this.width = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * Width
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'width' field.
      * Width
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearWidth() {
      width = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'draft' field.
      * Draft
      * @return The value.
      */
    public java.lang.Double getDraft() {
      return draft;
    }


    /**
      * Sets the value of the 'draft' field.
      * Draft
      * @param value The value of 'draft'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setDraft(java.lang.Double value) {
      validate(fields()[14], value);
      this.draft = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'draft' field has been set.
      * Draft
      * @return True if the 'draft' field has been set, false otherwise.
      */
    public boolean hasDraft() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'draft' field.
      * Draft
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearDraft() {
      draft = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'cargo' field.
      * Cargo
      * @return The value.
      */
    public java.lang.Integer getCargo() {
      return cargo;
    }


    /**
      * Sets the value of the 'cargo' field.
      * Cargo
      * @param value The value of 'cargo'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setCargo(java.lang.Integer value) {
      validate(fields()[15], value);
      this.cargo = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'cargo' field has been set.
      * Cargo
      * @return True if the 'cargo' field has been set, false otherwise.
      */
    public boolean hasCargo() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'cargo' field.
      * Cargo
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearCargo() {
      cargo = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'transceiverClass' field.
      * Transceiver Class
      * @return The value.
      */
    public java.lang.CharSequence getTransceiverClass() {
      return transceiverClass;
    }


    /**
      * Sets the value of the 'transceiverClass' field.
      * Transceiver Class
      * @param value The value of 'transceiverClass'.
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder setTransceiverClass(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.transceiverClass = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'transceiverClass' field has been set.
      * Transceiver Class
      * @return True if the 'transceiverClass' field has been set, false otherwise.
      */
    public boolean hasTransceiverClass() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'transceiverClass' field.
      * Transceiver Class
      * @return This builder.
      */
    public gov.marinecadastre.ais.AisVesselData.Builder clearTransceiverClass() {
      transceiverClass = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AisVesselData build() {
      try {
        AisVesselData record = new AisVesselData();
        record.mmsi = fieldSetFlags()[0] ? this.mmsi : (java.lang.Integer) defaultValue(fields()[0]);
        record.baseDateTime = fieldSetFlags()[1] ? this.baseDateTime : (java.time.LocalTime) defaultValue(fields()[1]);
        record.lat = fieldSetFlags()[2] ? this.lat : (java.lang.Double) defaultValue(fields()[2]);
        record.lon = fieldSetFlags()[3] ? this.lon : (java.lang.Double) defaultValue(fields()[3]);
        record.SOG = fieldSetFlags()[4] ? this.SOG : (java.lang.Double) defaultValue(fields()[4]);
        record.COG = fieldSetFlags()[5] ? this.COG : (java.lang.Double) defaultValue(fields()[5]);
        record.heading = fieldSetFlags()[6] ? this.heading : (java.lang.Double) defaultValue(fields()[6]);
        record.vesselName = fieldSetFlags()[7] ? this.vesselName : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.IMO = fieldSetFlags()[8] ? this.IMO : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.callSign = fieldSetFlags()[9] ? this.callSign : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.vesselType = fieldSetFlags()[10] ? this.vesselType : (java.lang.Integer) defaultValue(fields()[10]);
        record.status = fieldSetFlags()[11] ? this.status : (java.lang.Integer) defaultValue(fields()[11]);
        record.length = fieldSetFlags()[12] ? this.length : (java.lang.Integer) defaultValue(fields()[12]);
        record.width = fieldSetFlags()[13] ? this.width : (java.lang.Integer) defaultValue(fields()[13]);
        record.draft = fieldSetFlags()[14] ? this.draft : (java.lang.Double) defaultValue(fields()[14]);
        record.cargo = fieldSetFlags()[15] ? this.cargo : (java.lang.Integer) defaultValue(fields()[15]);
        record.transceiverClass = fieldSetFlags()[16] ? this.transceiverClass : (java.lang.CharSequence) defaultValue(fields()[16]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AisVesselData>
    WRITER$ = (org.apache.avro.io.DatumWriter<AisVesselData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AisVesselData>
    READER$ = (org.apache.avro.io.DatumReader<AisVesselData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










